CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE TABLE IF NOT EXISTS "user" (
  user_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  first_name    VARCHAR(24) NOT NULL,
  last_name     VARCHAR(24) NOT NULL,
  email         CITEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS country (
  country_code CHAR(3) PRIMARY KEY,
  name VARCHAR(30) NOT NULL
);

CREATE TABLE IF NOT EXISTS organization (
  organization_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  name            VARCHAR(64) NOT NULL,
  country_code    CHAR(3) NOT NULL REFERENCES country(country_code),
  owner_id        BIGINT NOT NULL REFERENCES "user"(user_id)
);

CREATE TABLE IF NOT EXISTS role (
  role_id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        TEXT NOT NULL,
  description TEXT
);

CREATE TABLE IF NOT EXISTS permission (
  permission_id SMALLSERIAL PRIMARY KEY,
  name         TEXT UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS role_permission (
  role_id        BIGINT NOT NULL REFERENCES role(role_id) ON DELETE CASCADE,
  permission_id  SMALLINT NOT NULL REFERENCES permission(permission_id),
  PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE IF NOT EXISTS organization_member (
  user_id           BIGINT NOT NULL REFERENCES "user"(user_id) ON DELETE CASCADE,
  organization_id   BIGINT NOT NULL REFERENCES organization(organization_id) ON DELETE CASCADE,
  joined_at         TIMESTAMPTZ NOT NULL DEFAULT now(),
  profile_photo_url TEXT,
  PRIMARY KEY (user_id, organization_id)
);

CREATE TABLE IF NOT EXISTS organization_member_role (
  user_id           BIGINT NOT NULL REFERENCES "user"(user_id) ON DELETE CASCADE,
  organization_id   BIGINT NOT NULL REFERENCES organization(organization_id) ON DELETE CASCADE,
  role_id           BIGINT NOT NULL REFERENCES role(role_id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, organization_id, role_id)
);

CREATE TABLE IF NOT EXISTS invitation (
  invitation_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  organization_id BIGINT NOT NULL REFERENCES organization(organization_id) ON DELETE CASCADE,
  invited_email   CITEXT NOT NULL,
  inviter_id      BIGINT NOT NULL REFERENCES "user"(user_id),
  token           UUID NOT NULL DEFAULT gen_random_uuid(),
  status          TEXT NOT NULL DEFAULT 'pending'
);

CREATE TABLE IF NOT EXISTS inventory (
  inventory_id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  organization_id BIGINT NOT NULL REFERENCES organization(organization_id) ON DELETE CASCADE,
  name            VARCHAR(64) NOT NULL
);

CREATE TABLE IF NOT EXISTS item (
  item_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  name          VARCHAR(64) NOT NULL,
  unit          VARCHAR(50),
  icon_url      TEXT DEFAULT NULL,
  unit_price    NUMERIC CHECK (unit_price >= 0),
  attributes    JSONB
);

CREATE TABLE IF NOT EXISTS inventory_item (
  inventory_id  BIGINT NOT NULL REFERENCES inventory(inventory_id) ON DELETE CASCADE,
  item_id       BIGINT NOT NULL REFERENCES item(item_id) ON DELETE CASCADE,
  quantity      NUMERIC NOT NULL CHECK (quantity >= 0),
  PRIMARY KEY (inventory_id, item_id)
);

CREATE INDEX IF NOT EXISTS user_email_idx ON "user"(email);
CREATE INDEX IF NOT EXISTS item_name_idx ON item(name);
CREATE INDEX IF NOT EXISTS item_attributes_idx ON item USING GIN (attributes);